version = 1.0

description ="""
Example project for a Gradle build

Project name = ${project.name}

More detailed information here...

"""

File log4j2ConfigFile
configure(allprojects.findAll {it.name == rootProject.name}) {
    log4j2ConfigFile = file('src/main/resources/log4j2.xml')
// Using an absolute path
    log4j2ConfigFile = file(log4j2ConfigFile.absolutePath)
}



allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
//    apply plugin: 'java-library-distribution'
    sourceCompatibility = java_version
    group = 'com.makco.smartfinance'
    version = '1.0'

    repositories {
        mavenCentral()
    }

    dependencies{
        testCompile 'junit:junit:4.11'
        compile 'org.apache.logging.log4j:log4j-api:2.5'
        compile 'org.apache.logging.log4j:log4j-core:2.5'
    }

    processResources {
        from log4j2ConfigFile
    }

    processTestResources {
        from log4j2ConfigFile
    }
}

subprojects {
    test {
        testLogging {
            //http://mrhaki.blogspot.ca/2014/10/gradle-goodness-show-standard-out-or.html
            // Make sure output from
            // standard out or error is shown
            // in Gradle output.
            showStandardStreams = true
        }
    }
}

//https://discuss.gradle.org/t/how-to-jar-all-class-output-from-all-sub-projects-into-one-jar/7049

dependencies {
    compile project(':database_engine')
    compile 'org.hibernate:hibernate-entitymanager:' + hibernate_version //JPA
    compile 'org.hibernate:hibernate-java8:' + hibernate_version
    //Java8 specific data-types such as any of the JSR 310 Date/Time types in domain model
    compile 'org.hibernate:hibernate-c3p0:' + hibernate_version //For connection pooling
    compile 'javax.validation:validation-api:1.0.0.GA' //javax.validation.constraints
}

//1st approach: dependent jars are in separate folder $libsDir\\$lib_folder
task copyLibDependecies(type: Copy) {
    println ">>>path to store dependencies: $libsDir\\$lib_folder"
    println ">>>Depenedency list:"
    configurations.compile.collect {
        println ">>>$it.absolutePath"
    }
    from configurations.compile
    into "$libsDir\\$lib_folder"
}
jar.dependsOn copyLibDependecies

jar {
    manifest {
        attributes(
                'Main-Class': 'com.makco.smartfinance.Main',
                'Class-Path': 'log4j2.xml ' + configurations.compile.collect { "$lib_folder/"+it.getName() }.join(' ')
        )
    }
}

//////2nd approach
//task fatJar(type: Jar) {
//    manifest {
//        attributes(
//                'Main-Class': 'com.makco.smartfinance.Main',
//                'Class-Path': 'log4j2.xml '
//        )
//    }
//
//    baseName = project.name
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}
//build.dependsOn fatJar
