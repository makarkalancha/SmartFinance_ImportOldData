version = 1.0

description ="""
Example project for a Gradle build

Project name = ${project.name}

More detailed information here...

"""

File log4j2ConfigFile
configure(allprojects.findAll {it.name == rootProject.name}) {
    log4j2ConfigFile = file('src/main/resources/log4j2.xml')
// Using an absolute path
    log4j2ConfigFile = file(log4j2ConfigFile.absolutePath)
}



allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
//    apply plugin: 'java-library-distribution'
    sourceCompatibility = java_version
    group = 'com.makco.smartfinance'
    version = '1.0'

    repositories {
        mavenCentral()
    }

    dependencies{
        testCompile 'junit:junit:4.11'
        compile 'org.apache.logging.log4j:log4j-api:2.5'
        compile 'org.apache.logging.log4j:log4j-core:2.5'
    }

    processResources {
        from log4j2ConfigFile
    }

    processTestResources {
        from log4j2ConfigFile
    }

}

subprojects {



    test {
        testLogging {
            //http://mrhaki.blogspot.ca/2014/10/gradle-goodness-show-standard-out-or.html
            // Make sure output from
            // standard out or error is shown
            // in Gradle output.
            showStandardStreams = true
        }
    }

//    project(':database_layer') {
//        dependencies {
//            compile project(':database_engine') /*{changing = true}*/
//            compile 'org.hibernate:hibernate-entitymanager:'+hibernate_version //JPA
//            compile 'org.hibernate:hibernate-java8:'+hibernate_version //Java8 specific data-types such as any of the JSR 310 Date/Time types in domain model
//            compile 'org.hibernate:hibernate-c3p0:'+hibernate_version //For connection pooling
//            compile 'javax.validation:validation-api:1.0.0.GA' //javax.validation.constraints
//        }
//    }
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/java"]
            includes = ["**/*.fxml"]
        }
    }
}

//https://discuss.gradle.org/t/how-to-jar-all-class-output-from-all-sub-projects-into-one-jar/7049

dependencies {
    compile project(':database_engine')
//    compile { project(path: ':database_engine', configuration: 'jar') }
    compile 'org.hibernate:hibernate-entitymanager:' + hibernate_version //JPA
    compile 'org.hibernate:hibernate-java8:' + hibernate_version
    //Java8 specific data-types such as any of the JSR 310 Date/Time types in domain model
    compile 'org.hibernate:hibernate-c3p0:' + hibernate_version //For connection pooling
    compile 'javax.validation:validation-api:1.0.0.GA' //javax.validation.constraints
}

//task fatJar(type: Jar) {
//    manifest {
//        attributes (
//                'Main-Class': 'com.makco.smartfinance.Main',
//                'Class-Path': 'log4j2.xml ' + configurations.compile.collect { it.getName() }.join(' ')
//        )
//    }
//    baseName = project.name + '-all'
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}
//
//jar.dependsOn fatJar

//artifacts {
//    configurations.compile.each{
//        println "~~~$it.absolutePath"
//    }
//}

//// Task "distZip" added by plugin "java-library-distribution":
//distZip.shouldRunAfter(build)

//task copyInJar(type: Copy) {
//    from configurations.compile
//    into "$lib_folder"
//}
//build.dependsOn copyInJar

////1st approach
//jar {
//    manifest {
//        attributes(
//                'Main-Class': 'com.makco.smartfinance.Main',
////                'Class-Path': 'log4j2.xml ' + configurations.compile.collect { "$lib_folder/"+it.getName() }.join(' ')
//                'Class-Path': 'log4j2.xml ' + configurations.compile.collect { it.getName() }.join(' ')
//        )
//    }
//
//    from('<path-to-props-file>') {
//        include '**/*'
//        into('<target-path>')
//    }
//
////    into "$lib_folder"
////    from configurations.runtime
//
//    //puts jar file in main jar
//    from configurations.compile
//    into ""
////    into "$lib_folder"
////    include '**/*.jar'
//
////    from {
//        configurations.compile.collect {
//            println ">>>$it.absolutePath"
//////            println ">>>"
////            it.isDirectory() ? it : zipTree(it)
//        }
////    }
////    with jar
//}
//project.tasks.remove(jar)
task fatJar(type: Jar) {
//task jar(type: Jar, overwrite: true) {
    manifest {
        attributes(
                'Main-Class': 'com.makco.smartfinance.Main',
//                'Class-Path': 'log4j2.xml ' + configurations.compile.collect { "$lib_folder/"+it.getName() }.join(' ')
                'Class-Path': 'log4j2.xml ' + configurations.compile.collect { it.getName() }.join(' ')
        )
    }

//    baseName = project.name + '-all'
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

build.dependsOn fatJar



//subprojects.each { subproject -> evaluationDependsOn(subproject.path)}
////task allJar( type: Jar, dependsOn: subprojects.build ) {
//task allJar( type: Jar, dependsOn: subprojects.tasks["build"] ) {
//    baseName = 'allJar'
//    subprojects.each { subproject ->
//        from subproject.configurations.archives.allArtifacts.files.collect {
//            zipTree(it)
//        }
//    }
//}
//artifacts {
//    archives allJar
//}